package crypto

import (
	"crypto/x509"
	"encoding/hex"
	"os"
	"testing"
)

const (
	privateKey = `
-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBAKDVmwBfST95FRV0CKf/prBYAj/pzAVqkosGXiVgcIkxXLYnZfAg
8iq/2Bi5w6jQTIKODHN4dkOVZlvNkp890GUCAwEAAQJAc3SjjoLYjC4Zior/Y8pM
GK80/jiRcxnsFMz/bIlsf67CLlQjVgw/G73z9kZqkQ+xSxBb46p8zmIb1rqooC7t
AQIhANOwYRGIREZC2e4FfWdJl+sO1UMvlLRjlwzm5Bv5oVXhAiEAwoAeibhoup6j
myaP1uf2miMlb8CuvmubK/jjEVrFgwUCIQDDyLxuH66toQS4HIG4Npt3/hcF9Yq+
L+GzQBS3PvCVYQIgImTPgaEHfACzg6sVAnawZ99RLmrPO8MBhIwVcysvBBUCIDdj
LddRkzerrTLRe8rvHEsmnE2NxYRmUBGxa7jHEkCh
-----END RSA PRIVATE KEY-----
`

	publicKey = `
-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKDVmwBfST95FRV0CKf/prBYAj/pzAVq
kosGXiVgcIkxXLYnZfAg8iq/2Bi5w6jQTIKODHN4dkOVZlvNkp890GUCAwEAAQ==
-----END PUBLIC KEY-----
`

	certPEM = `
-----BEGIN CERTIFICATE-----
MIIBzzCCATgCCQDj83GWNoznaTANBgkqhkiG9w0BAQUFADBRMQswCQYDVQQGEwJD
TjELMAkGA1UECBMCU0gxCzAJBgNVBAcTAnNoMQwwCgYDVQQKEwNhYmMxDDAKBgNV
BAsTA2FiYzEMMAoGA1UEAxMDYWJjMB4XDTE3MDUxNTA5Mzc1MloXDTE4MDUxNTA5
Mzc1MlowSzELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAlNIMQswCQYDVQQHEwJzaDEK
MAgGA1UEChMBYTEKMAgGA1UECxMBYTEKMAgGA1UEAxMBYTBcMA0GCSqGSIb3DQEB
AQUAA0sAMEgCQQCg1ZsAX0k/eRUVdAin/6awWAI/6cwFapKLBl4lYHCJMVy2J2Xw
IPIqv9gYucOo0EyCjgxzeHZDlWZbzZKfPdBlAgMBAAEwDQYJKoZIhvcNAQEFBQAD
gYEAQIemZj/37/P42RC6m/XblSxbHk6QtBxaFG+j18Im1E5ciMWOeulN28VQsjAl
XnFBAq8osftcXPS8DNszxbhm2VH5v+860TXhSgUBuFiLvLClwIQbrtJpYG4JkBgi
KZBwYOA5pPE6+ArMeB/9687MmQF1mlH8wCuCb/A2ah7uTgA=
-----END CERTIFICATE-----
`

	certDER = "308201cf30820138020900e3f37196368ce769" +
		"300d06092a864886f70d01010505003051310b300906035504061302434e310b" +
		"3009060355040813025348310b3009060355040713027368310c300a06035504" +
		"0a1303616263310c300a060355040b1303616263310c300a0603550403130361" +
		"6263301e170d3137303531353039333735325a170d3138303531353039333735" +
		"325a304b310b300906035504061302434e310b3009060355040813025348310b" +
		"3009060355040713027368310a3008060355040a130161310a3008060355040b" +
		"130161310a30080603550403130161305c300d06092a864886f70d0101010500" +
		"034b003048024100a0d59b005f493f7915157408a7ffa6b058023fe9cc056a92" +
		"8b065e25607089315cb62765f020f22abfd818b9c3a8d04c828e0c7378764395" +
		"665bcd929f3dd0650203010001300d06092a864886f70d010105050003818100" +
		"4087a6663ff7eff3f8d910ba9bf5db952c5b1e4e90b41c5a146fa3d7c226d44e" +
		"5c88c58e7ae94ddbc550b230255e714102af28b1fb5c5cf4bc0cdb33c5b866d9" +
		"51f9bfef3ad135e14a0501b8588bbcb0a5c0841baed269606e09901822299070" +
		"60e039a4f13af80acc781ffdebcecc9901759a51fcc02b826ff0366a1eee4e00"

	caPrivateKey = `
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,55682563F3EA8C3C

p5nmZVAIQIuMv1GpEkZu15y6d1TCrwUc05CAjsrttps3FEHPzY471LX58na49Hs1
Hqpf0RPW3EhxN8sHI0DMbJOWjqXbC2TQ24s2m9AMO02pFb+5YtFujt5kOrrmdPlb
365mPaMsNRnRVZSWuTXkhbwj+zOLmGfmJAKSGbp7ZFTsARRY8ik7CszkUQrIN2Gd
utry9lXHWAjlFVs4KILJjMQq7/AfHu2LAUBoAD/NorN3QTtKnneJv/txhPhwp53i
ftufs9eGaMPWPkvo8YbDyKAWOV1KgRbUTaYVmAc6UdXSUm8F44VLG7QpVxJ6Zdtj
dd//95+NWRN/KEJslHgUyYXuNrs0qmT9ObKGedlCcBn15FizThv9yBRxGpaoCOwH
YPMApOZj/h/HLNMO5SAUi50Q4NgRRh2rvrKEr3+0UEyN1sv6w7lvFFPXfARx1hAE
SbbYTbofJU+xXy+vsoZwCbjsoQKjTH2Z44llLMNC/RSqbpoRt0VVbdoNG4tq9E6q
iFvtxoTDy0mV+B5ZyPhnvh2ry2CofFobtXRCLxIwdNtJmo+WtllaqT69T1kM5pI4
H877ztbqz/IOHn3Q41uHybvlHCnQf7Vaesfn2VAX52CIEERl3pZ+s3r5GhitTAr6
Zl149FDRIu+Zs5ykocZa8M5HBKbXEmAVDAxV549n64KAD35sxgOeBPIHW5L5kLiv
3eNgAw8d71TJfzW2AoulAsq0VkXfkUKeqU6bLjzGJh+aMtSMdrCC52efhQHCXxA/
XKXGiqiKfVZ/p7O00XKTYq6UwRKvvu8DSB+5dhJpoIrEvYKxRvC9Vw==
-----END RSA PRIVATE KEY-----
`

	caCert = `
-----BEGIN CERTIFICATE-----
MIIC1TCCAj6gAwIBAgIJAJYkFvcd+MPyMA0GCSqGSIb3DQEBBQUAMFExCzAJBgNV
BAYTAkNOMQswCQYDVQQIEwJTSDELMAkGA1UEBxMCc2gxDDAKBgNVBAoTA2FiYzEM
MAoGA1UECxMDYWJjMQwwCgYDVQQDEwNhYmMwHhcNMTcwNTE1MDkyNzU3WhcNMTcw
NjE0MDkyNzU3WjBRMQswCQYDVQQGEwJDTjELMAkGA1UECBMCU0gxCzAJBgNVBAcT
AnNoMQwwCgYDVQQKEwNhYmMxDDAKBgNVBAsTA2FiYzEMMAoGA1UEAxMDYWJjMIGf
MA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDD7tK54GLC6R0Qwn9WfMqs8VIoRBsC
9J6P29ArZh1Lvl69EOljGTb3wd9MmyxzCDVTcxUQxtV8b4kEs2LJDq2H2BrABgiw
zAI3fAH+GcXP7qCEiUyPUVNHWkQCI3rf8Js2g42IomrK1AOOGwmcJIHzLmx2LR07
M7sAfzb2GaFrQwIDAQABo4G0MIGxMB0GA1UdDgQWBBTOVe9KpP0SeE0mmJCZHu7o
bKSCgDCBgQYDVR0jBHoweIAUzlXvSqT9EnhNJpiQmR7u6GykgoChVaRTMFExCzAJ
BgNVBAYTAkNOMQswCQYDVQQIEwJTSDELMAkGA1UEBxMCc2gxDDAKBgNVBAoTA2Fi
YzEMMAoGA1UECxMDYWJjMQwwCgYDVQQDEwNhYmOCCQCWJBb3HfjD8jAMBgNVHRME
BTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBALN+p9IFBtTUrcjp4ii/dxGa4BXB2ZeU
c3VT6PbYXJDOjJA0q5/BYFvLMcmrWJEdl05Z6v/I4tynz9ld+Q0XZtE5rI9xxd7c
CC9uJBFvdnTYVuT18mHvPwNVr+ByeemfRl1MAfCcPbIrf5eLVrvKaUgSDQzCxevd
HkGmy94I4TH4
-----END CERTIFICATE-----
`
	caPwd = "123456"

	raw       = "71776572747975690a"
	signature = "441fc2c5d9eeb62fecbed55a032e574a8c0db4588112e6c47abf15afc6be6155a00ede7bdbff071f774b236d9cacf6b5059787ffee12625786a73815f0b9e005"
)

func getSign() ([]byte, []byte, error) {
	signed, err := hex.DecodeString(raw)
	if err != nil {
		return nil, nil, err
	}
	signature, err := hex.DecodeString(signature)
	if err != nil {
		return nil, nil, err
	}

	return signed, signature, nil
}

func TestSignPEM(t *testing.T) {
	signed, signature, err := getSign()
	if err != nil {
		t.Fatal(err)
	}

	crtFile := "test.crt"
	f, err := os.Create(crtFile)
	if err != nil {
		t.Fatal(err)
	}
	f.WriteString(certPEM)
	err = VerifySignature(crtFile, x509.SHA256WithRSA, signed, signature)
	os.Remove(crtFile)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignDER(t *testing.T) {
	signed, signature, err := getSign()
	if err != nil {
		t.Fatal(err)
	}

	crt, err := hex.DecodeString(certDER)
	if err != nil {
		t.Fatal(err)
	}

	crtFile := "test.crt"
	f, err := os.Create(crtFile)
	if err != nil {
		t.Fatal(err)
	}
	f.Write(crt)
	err = VerifySignature(crtFile, x509.SHA256WithRSA, signed, signature)
	os.Remove(crtFile)
	if err != nil {
		t.Fatal(err)
	}
}
